format          PE GUI 4.0                                                      ; Формат PE. Версия GUI 4.0.
entry           start                                                           ; Точка входа
include         '%include%\win32a.inc'                                          ; Подключаем стандартный инклюд. Зачем?
 
_style          equ             WS_VISIBLE+WS_DLGFRAME+WS_SYSMENU               ; ручное задание стиля. ЭКВИВАЛЕНТЫ должны задаваться ДО основного кода
_bk_color       equ             (255 or (255 shl 8)) or (255 shl 16)            ; цвет фона (три компоненты RGB)
_text_color     equ             0                                               ; цвет текста = черный
 
;=== сегмент кода ============================================================
 
section         '.text' code readable executable
 
  start: 
                invoke          GetModuleHandle,0                               ; Получим дескриптор приложения. Параметр = 0 - значит вернуть дескриптор вызвавшего функцию модуля.
                mov             [wc.hInstance],eax                              ; Сохраним дескриптор в структуру wc
                mov             [wc.style], CS_HREDRAW or CS_VREDRAW            ; Стили перерисовки окна целиком
                invoke          LoadIcon,0,IDI_ASTERISK                         ; Загружаем иконку IDI_ASTERISK из ресурсов исполняемого файла
                mov             [wc.hIcon],eax                                  ; Сохраним в структуре окна
                invoke          LoadCursor,0,IDC_ARROW                          ; Загружаем курсор IDC_ARROW из ресурсов исполняемого файла
                mov             [wc.hCursor],eax                                ; Сохраним дескриптор курсора в структуре окна
                mov             [wc.lpfnWndProc],WindowProc                     ; Зададим ссылку на нашу процедуру обработки окна
                mov             [wc.lpszClassName],_class                       ; Зададим имя класса окна
                mov             [wc.hbrBackground],COLOR_WINDOW+1               ; Зададим цвет кисти
                invoke          RegisterClass,wc                                ; Зарегистрируем наш класс окна
                test            eax,eax                                         ; Проверим eax на ошибку (0).
                jz              error                                           ; Если 0 - то ошибка. Выводим и выходим.
                
                invoke          CreateWindowEx,0,_class,_title,_style,128,128,512,512,NULL,NULL,[wc.hInstance],NULL  ; Создадим экземпляр окна на основе зарегистрированного класса. в eax возвращает дескриптор окна.
                test            eax,eax                                         ; Проверим eax на ошибку (0).
                jz              error                                           ; Если 0 - то ошибка. Выводим и выходим.
                
                mov             [wHMain],eax                                    ; сохраним дескриптор окна
 
;--- цикл обработки сообщений ------------------------------------------------
 
  msg_loop:
                invoke          GetMessage,msg,NULL,0,0                         ; Получаем сообщение из очереди сообщений приложения, помещает его в структуру msg. Результат выполнения в eax.
                or              eax,eax                                         ; Сравнивает eax с 0
                jz              end_loop                                        ; Если 0 то пришло сообщение WM_QUIT - выходим из цикла ожидания сообщений, если не 0 - продолжаем обрабатывать очередь
  msg_loop_2:
                invoke          TranslateMessage,msg                            ; Дополнительная функция обработки сообщения. Конвертирует некоторые сообщения и отправляет их обратно в очередь. Служит для обработки клавиатуры.
                invoke          DispatchMessage,msg                             ; Пересылает сообщения соответствующим процедурам обработки сообщений (WindowProc ...).
                jmp             short msg_loop                                  ; В начало цикла
  error:
                invoke          MessageBox,NULL,_error,NULL,MB_ICONERROR+MB_OK  ; Вывод сообщения об ошибке
  end_loop:
                invoke          ExitProcess,[msg.wParam]                        ; Выход из программы. Код выхода сохраняется в msg.wParam. Его надо передать системе
 
;--- процедура обработки сообщений окна (функция окна, оконная процедура) ----
 
proc            WindowProc      hWnd,wMsg,wParam,lParam
                push            ebx esi edi                                     ; сохраним все регистры
                cmp             [wMsg],WM_DESTROY                               ; Проверим на WM_DESTROY
                je              .wmdestroy                                      ; на обработчик wmdestroy
                cmp             [wMsg],WM_CREATE                                ; Проверим на WM_CREATE
                je              .wmcreate                                       ; на обработчик wmcreate
                cmp             [wMsg],WM_PAINT                                 ; Проверим на WM_PAINT
                je              .wmpaint                                        ; на обработчик wmpaint
 
  .defwndproc:
                invoke          DefWindowProc,[hWnd],[wMsg],[wParam],[lParam]   ; Дефолтная функция. Обрабатывает сообщения, которыми наша программа не пользуется.
                jmp             .finish 
  .wmcreate:
                xor             eax,eax
                jmp             .finish
  .wmpaint:
                invoke          BeginPaint,[hWnd],pnt
                mov             [pHMain],eax                                    ; Сохранить контекст (дескриптор) устройства
                invoke          SetBkColor,[pHMain],_bk_color                   ; Зададим цвет фона
                invoke          SetTextColor,[pHMain],_text_color               ; Зададим цвет текста
                invoke          GetClientRect,[hWnd],rect                       ; Поучить область вывода
                invoke          DrawText,[pHMain],_text,-1,rect,DT_WORDBREAK    ; Вывести текст в окно
                invoke          EndPaint,[hWnd],pnt                             ; Освободить контекст устройства
                xor             eax,eax
                jmp             .finish
  .wmdestroy:                                                                   ; Обработчик сообщения WM_DESTROY. Обязателен.
                invoke          PostQuitMessage,0                               ; Посылает сообщение WM_QUIT в очередь сообщений, что вынуждает GetMessage вернуть 0. Посылается для выхода из программы. Посылается только основным окном.
                xor             eax,eax                                         ; Если наша процедура окна обрабатывает какое-либо сообщение, то она должна вернуть 0. eax=0. Иначе программа поведет себя непредсказуемо.
  .finish:
                pop             edi esi ebx                                     ; восстановим все регистры
                ret
endp
 
;=== сегмент данных ==========================================================
 
section         '.data' data readable writeable
 
_class          db              'FASMWIN32',0                                   ; Название собственного класса. Мы будем регистрировать свой.
_title          db              'Win32 text output',0                           ; Текст в заголовке окна.
_error          db              'Startup failed.',0                             ; Текст ошибки
_text           db              'Бывают иные встречи, совершенно даже с незнакомыми нам людьми, которыми мы начинаем интересоваться с '
                db              'первого взгляда, как-то вдруг, внезапно, прежде чем скажем слово. Такое точно впечатление произвел на '
                db              'Раскольникова тот гость, который сидел поодаль и походил на отставного чиновника. Молодой человек '
                db              'несколько раз припоминал потом это первое впечатление и даже приписывал его предчувствию. Он беспрерывно '
                db              'взглядывал на чиновника, конечно, и потому еще, что и сам тот упорно смотрел на него, и видно было, что тому '
                db              'очень хотелось начать разговор. На остальных же, бывших в распивочной, не исключая и хозяина, чиновник смотрел '
                db              'как-то привычно и даже со скукой, а вместе с тем и с оттенком некоторого высокомерного пренебрежения, как бы на '
                db              'людей низшего положения и развития, с которыми нечего ему говорить. Это был человек лет уже за пятьдесят, '
                db              'среднего роста и плотного сложения, с проседью и с большою лысиной, с отекшим от постоянного пьянства желтым, '
                db              'даже зеленоватым лицом и с припухшими веками, из-за которых сияли крошечные, как щелочки, но одушевленные красноватые '
                db              'глазки. Но что-то было в нем очень странное, во взгляде его светилась как будто даже восторженность, — пожалуй, был и '
                db              'смысл и ум, — но в то же время мелькало как будто и безумие. Одет он был в старый, совершенно оборванный черный фрак, '
                db              'с осыпавшимися пуговицами. Одна только еще держалась кое-как, и на нее-то он и застегивался, видимо желая не удаляться '
                db              'приличий. Из-под нанкового жилета торчала манишка, вся скомканная, запачканная и залитая. Лицо было выбрито, по-чиновничьи, '
                db              'но давно уже, так что уже густо начала выступать сизая щетина. Да и в ухватках его действительно было что-то солидно-чиновничье. '
                db              'Но он был в беспокойстве, ерошил волосы и подпирал иногда, в тоске, обеими руками голову, положа продранные локти на залитый и липкий стол.',0
wHMain          dd              ?                                               ; дескриптор окна
pHMain          dd              ?                                               ; дескриптор контекста устройства
 
wc              WNDCLASS                                                        ; Структура окна. Для функции RegisterClass
msg             MSG                                                             ; Структура системного сообщения, которое система посылает нашей программе. Структура содержится в INCLUDE\EQUATES\USER32.INC
pnt             PAINTSTRUCT                                                     ; Структура отрисовки клиентской области окна.
rect            RECT                                                            ; Структура
 
;=== таблица импорта =========================================================
section         '.idata' import data readable writeable
 
library         kernel32,'KERNEL32.DLL',user32,'USER32.DLL',gdi32,'GDI32.DLL'
 
include         'api\kernel32.inc'
include         'api\user32.inc'
include         'api\gdi32.inc'